#!/usr/bin/env bash
set -euo pipefail
STAGE_NAME="deploy"

# common
LOCAL_PATH=${BASH_SOURCE%/*}
source "$LOCAL_PATH/action-common"

# main
function main()
{
  act-log-message "Will deploy using method: ${DEPLOYMENT_TYPE}" "INFO"

  # deployment target: none
  if [[ ${DEPLOYMENT_TYPE} == "none" ]]; then
    act-log-message "not running deployment, no DEPLOYMENT_TYPE set!" "NONE"
    exit 0
  fi

  # deployment namespace
  local DEPLOYMENT_NAMESPACE=${1:-$DEPLOYMENT_NAMESPACE}
  if [ -z "$DEPLOYMENT_NAMESPACE" ]; then
    act-log-message "no target environment specified when calling deploy stage!" "ERROR"
    exit 1
  fi

  # deployment id
  local DEPLOYMENT_ID=${2:-$DEPLOYMENT_ID}

  # deployment target
  local DEPLOYMENT_ENVIRONMENT=${3:-$DEPLOYMENT_ENVIRONMENT}
  if [ -z "$DEPLOYMENT_ENVIRONMENT" ]; then
    act-log-message "no target environment specified when calling deploy stage!" "ERROR"
    exit 1
  fi

  act-log-message "deploying environment [$DEPLOYMENT_ENVIRONMENT] ..." "INFO"

  # deploymentType: docker swarm
  if [[ ${DEPLOYMENT_TYPE} == "swarm" ]]; then
    # web based services
    if [[ ${PROJECT_TYPE} =~ ^.*-http$ ]]; then
      export SWARMSTACKFILE_DEFAULT="$MPI_RESOURCES_MIRROR/swarm-http.yml"
    fi

    # run deployment
    action-swarm-deploy "$DEPLOYMENT_NAMESPACE" "$DEPLOYMENT_ENVIRONMENT" "$DEPLOYMENT_ID"
    exit 0
  fi

  # deploymentType: helm
  if [[ ${DEPLOYMENT_TYPE} == "helm" ]]; then
    # web based services
    if [[ ${PROJECT_TYPE} =~ ^.*-http$ ]]; then
      DEPLOYMENT_CHART=philippheuer/webservice
    fi

    action-helm-deploy "$DEPLOYMENT_NAMESPACE" "$DEPLOYMENT_ENVIRONMENT" "$DEPLOYMENT_ID" "$DEPLOYMENT_CHART"
    exit 0
  fi

  # no match
  act-log-message "deployment type ${DEPLOYMENT_TYPE} is not supported!" "ERROR"
  exit 1
}

# entrypoint
case "${1:-}" in
  help)
    echo "Stage - Deploy"
    echo "Will execute infrastructure deployments for the specified environments"
    echo ""
    echo "Environment:"
    echo "* DEBUG: Can be set to true to enable debugging"
    ;;
  *)
    act-log-message "Running stage [$STAGE_NAME]" "INFO"
    act-common-prepare
    act-common-hook "pre-$STAGE_NAME"
    main "$@"
    act-common-hook "post-$STAGE_NAME"
;;
esac
