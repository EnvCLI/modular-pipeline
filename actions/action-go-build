#!/usr/bin/env bash
set -euo pipefail
ACTION_CATEGORY="go"
ACTION_NAME="build"

# common
LOCAL_PATH=${BASH_SOURCE%/*}
source "$LOCAL_PATH/pipeline-common"

# Public: Build a go binary
#
# Builds the go project for the provided os / arch.
#
# $1 - The build os for cross-compilation (see spec for all valid values)
# $2 - The build arch (see spec for all valid values)
#
# Examples
#
#   _build_go "linux" "amd64"
#   _build_go "linux" "arm64v8"
#   _build_go "windows" "amd64"
#
# Returns the exit code of the last command executed or 0 otherwise.
_build_go() {
  ARTIFACT=$1_$2
  ARTIFACT_OS=$1
  ARTIFACT_ARCH=$2
  GOARM=

  # arm architectures -> https://github.com/golang/go/wiki/GoArm#supported-architectures
  if echo "$2" | grep -q 'arm32v6'; then
    ARTIFACT_ARCH=arm
    GOARM=6
  fi
  if echo "$2" | grep -q 'arm32v7'; then
    ARTIFACT_ARCH=arm
    GOARM=7
  fi
  if echo "$2" | grep -q 'arm64v8'; then
    ARTIFACT_ARCH=arm64
  fi

  echo "--> Generating artifact $ARTIFACT [$NCI_COMMIT_REF_RELEASE] ..."
  # shellcheck disable=SC2086
  envcli run --env GOOS=$ARTIFACT_OS --env GOARCH=$ARTIFACT_ARCH --env GOARM=$GOARM --env CGO_ENABLED=0 go build -o $ARTIFACT_DIR/$ARTIFACT -ldflags="-w -X main.Version=$NCI_COMMIT_REF_RELEASE -X main.CommitHash=$NCI_COMMIT_SHA" ./src
  echo "--> Successfully generated artifact $ARTIFACT_DIR/$ARTIFACT [$(ls -lh $ARTIFACT_DIR/$ARTIFACT | cut -d " " -f5)]"
}

# main
function main()
{
  # configuration
  echo "-> Execute: Configuration"
  ARTIFACT_DIR=${ARTIFACT_DIR:-dist}
  ARTIFACT_BUILD_ARCHS=${ARTIFACT_BUILD_ARCHS:-linux_386,linux_amd64,linux_arm32v6,linux_arm32v7,linux_arm64v8,windows_386,windows_amd64,darwin_386,darwin_amd64}

  # code generation
  echo "-> Execute: Code Generation"
  envcli run go generate ./...

  # build artifacts
  echo "-> Execute: Artifact Generation"
  # linux_386
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'linux_386'; then
    _build_go linux 386 &
  fi
  # linux_amd64
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'linux_amd64'; then
    _build_go linux amd64 &
  fi
  # linux_arm32v6
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'linux_arm32v6'; then
    _build_go linux arm32v6 &
  fi
  # linux_arm32v7
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'linux_arm32v7'; then
    _build_go linux arm32v7 &
  fi
  # linux_arm64v8
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'linux_arm64v8'; then
    _build_go linux arm64v8 &
  fi
  # windows_386
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'windows_386'; then
    _build_go windows 386 &
  fi
  # windows_amd64
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'windows_amd64'; then
    _build_go windows amd64 &
  fi
  # darwin_386
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'darwin_386'; then
    _build_go darwin 386 &
  fi
  # darwin_amd64
  if echo "$ARTIFACT_BUILD_ARCHS" | grep -q 'darwin_amd64'; then
    _build_go darwin amd64 &
  fi

  # wait for all builds to finish
  wait
}

# entrypoint
case "${1:-}" in
  help)
    echo "Used to generate go artifacts"
    echo ""
    echo "Environment:"
    echo "* DEBUG: Can be set to true to enable debugging"
    echo "* ARTIFACT_DIR: The target directory for generated artifact files, defaults to /dist"
    echo "* ARTIFACT_BUILD_ARCHS: The type of binaries that should be build, supported are [linux_386,linux_amd64,linux_armv7,linux_armv8,windows_386,windows_amd64,darwin_386,darwin_amd64]"
    ;;
  *)
    _log_message "Running action [$ACTION_CATEGORY.$ACTION_NAME]" "INFO"
    _prepare
    _run_hook "pre-$ACTION_CATEGORY-$ACTION_NAME"
    main "$@"
    _run_hook "post-$ACTION_CATEGORY-$ACTION_NAME"
;;
esac
