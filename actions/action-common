#!/usr/bin/env bash

# debug mode
DEBUG=${DEBUG:-false}
if [ "$DEBUG" == "true" ]; then
    echo "-> Debugging mode enabled ..."
    set -x
fi

# global variables
MPI_RESOURCES_MIRROR=https://raw.githubusercontent.com/EnvCLI/modular-pipeline/master/resources

# func: prepare
function act-common-prepare()
{
    # prerequisites
    # - envcli
    if ! command -v envcli > /dev/null; then
        echo "-> envcli not available. Please run the modular pipeline installation script!"
        exit 1
    fi
    # - normalizeci
    if ! command -v normalizeci > /dev/null; then
        echo "-> normalizeci not available. Please run the modular pipeline installation script!"
        exit 1
    fi
    # - docker
    if ! command -v docker > /dev/null; then
        echo "-> docker not available. Please install docker!"
        exit 1
    fi

    # find container runtime (if docker info fails)
    if ! docker info &>/dev/null; then
        echo "-> Searching for container runtime ..."

        # overwrite DOCKER_HOST to reach the daemon, whereever it's running
        set +u
        if [ -z "$DOCKER_HOST" ] && [ "$KUBERNETES_PORT" ]; then
            echo "-> Detected kubernetes usage, using DOCKER_HOST = tcp://localhost:2375"
            export DOCKER_HOST='tcp://localhost:2375'
        elif [ "$DOCKER_TLS_CERTDIR" ]; then
            echo "-> Detected docker tls cert usage, using DOCKER_HOST = tcp://docker:2376"
            export DOCKER_HOST='tcp://docker:2376'
        fi
        set -u
    fi

    # normalize ci variables
    echo "-> execute: normalizeci"
    eval $(normalizeci)

    # ensure required variables are set
    export PROJECT_TYPE=${PROJECT_TYPE:-none}
    export DEPLOYMENT_TYPE=${DEPLOYMENT_TYPE:-none}

    # proxy
    export HTTP_PROXY=${HTTP_PROXY:-}
    export HTTPS_PROXY=${HTTPS_PROXY:-}
    export PROXY_HOST=${PROXY_HOST:-}
    export PROXY_PORT=${PROXY_PORT:-}
    export JAVA_PROXY_OPTS="-Dhttp.proxyHost=$PROXY_HOST -Dhttp.proxyPort=$PROXY_PORT -Dhttps.proxyHost=$PROXY_HOST -Dhttps.proxyPort=$PROXY_PORT"
}

# func: run hook / $1 = hook name
function act-common-hook()
{
    # repository hooks
    if test -f "$NCI_PROJECT_DIR/.ci/$1.sh"; then
        echo "-> execute: repository hook \`$1\`"
        $NCI_PROJECT_DIR/.ci/$1.sh
    fi
}

# container registry login
function act-common-container-registry-login()
{
  echo "-> trying to login to container registry $NCI_CONTAINERREGISTRY_HOST ..."

  if [[ -n "$NCI_CONTAINERREGISTRY_USERNAME" ]]; then
    docker login -u "$NCI_CONTAINERREGISTRY_USERNAME" -p "$NCI_CONTAINERREGISTRY_PASSWORD" "$NCI_CONTAINERREGISTRY_HOST"
  else
    echo "Failed to login to container registry! No credentials provided!"
    exit 1
  fi
}

# container registry login
function act-common-container-registry-push()
{
  echo "-> pushing image to remote registry $NCI_CONTAINERREGISTRY_HOST ..."
  docker push "${1:-}"
}
